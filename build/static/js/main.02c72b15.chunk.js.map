{"version":3,"sources":["components/main/cards/noImage.png","components/main/loading.svg","components/header/title/index.js","initialState.js","actions/submitSearch/index.js","actions/replaceMissingImage/index.js","reducer/index.js","actionTypes.js","reducer/searchUtils.js","reducer/dispatchSearch.js","reducer/middleware.js","Context.js","actions.js","components/header/searchBar/index.js","components/header/index.js","components/main/cards/card.js","components/main/cards/index.js","components/main/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Title","className","initialState","searchValue","response","loading","error","cache","filters","year","movies","blah","replaceMissingImage","posterUrl","movieToChange","find","movie","Poster","reducer","state","action","newState","type","submitSearch","payload","baseUrl","getSearchUrl","sanitizeSearchValue","trim","replace","toLowerCase","disptachInCache","dispatch","dispatchSuccess","dispatchFail","dispatchLoading","applyMiddleware","a","sanitizedSearchValue","searchUrl","fetch","serverResponse","json","serverResponseJson","requests","Search","map","imdbID","Promise","all","responses","Context","createContext","Provider","children","useReducer","enhancedDispatch","actions","useCallback","submitFilters","useActions","value","SearchBar","useContext","currentSearchValue","onSubmit","event","preventDefault","placeholder","onChange","e","target","disabled","Header","Card","poster","noImage","imgAltText","ariaLabel","Year","imdbRating","aria-label","aria-required","tabIndex","src","onError","alt","Cards","length","moviesList","index","key","Main","loadingIcon","data","Loading","App","React","memo","displayName","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.02c72b15.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/noImage.e99c211b.png\";","module.exports = __webpack_public_path__ + \"static/media/loading.68abfa64.svg\";","// @flow\nimport React from 'react';\nimport './title.css';\n\nconst Title = () => {\n\treturn (\n\t\t<h1 className=\"title\">\n\t\t\t<span className=\"OMDb\">OMDb</span>\n\t\t\t<span className=\"Search\">Search</span>\n\t\t</h1>\n\t);\n};\n\nexport default Title;\n","const initialState = {\n\tsearchValue: '',\n\tresponse: {\n\t\tloading: false,\n\t\terror: false\n\t},\n\tcache: {},\n\tfilters: {\n\t\tyear: 2020\n\t},\n\tmovies: []\n};\n\nexport default initialState;\n","// @flow\n\nconst blah = (movies: Movies, searchValue: string, cache: Cache, response: ApiResponse): $Shape<State> => {\n\treturn { movies, searchValue, cache: { ...cache, [searchValue]: movies }, response };\n};\nexport default blah;\n","// @flow\n\nconst replaceMissingImage = (movies: Array<MovieData>, posterUrl: string): $Shape<State> => {\n\t// Replace the 404'd image with N/A, which displays the default image in the componnet\n\tconst movieToChange = movies.find((movie) => movie.Poster === posterUrl);\n\tif (movieToChange) movieToChange.Poster = 'N/A';\n\treturn { movies };\n};\n\nexport default replaceMissingImage;\n","import * as actionTypes from '../actionTypes';\nimport initialState from '../initialState';\n\nimport submitSearch from '../actions/submitSearch';\nimport replaceMissingImage from '../actions/replaceMissingImage';\n\nconst reducer = (state = initialState, action) => {\n\tlet newState = initialState;\n\tswitch (action.type) {\n\t\tcase actionTypes.SUBMIT_SEARCH: {\n\t\t\tnewState = submitSearch(action.payload.movies, action.payload.searchValue, action.payload.cache, action.payload.response);\n\t\t\tbreak;\n\t\t}\n\t\tcase actionTypes.REPLACE_MISSING_IMAGES: {\n\t\t\tnewState = replaceMissingImage(action.payload.movies, action.payload.posterUrl);\n\t\t\tbreak;\n\t\t}\n\t\tdefault: {\n\t\t\tnewState = initialState;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn { ...state, ...newState };\n};\n\nexport default reducer;\n","export const REPLACE_MISSING_IMAGES = 'REPLACE_MISSING_IMAGES';\nexport const SUBMIT_FILTERS = 'SUBMIT_FILTERS';\nexport const SUBMIT_SEARCH = 'SUBMIT_SEARCH';\nexport const TRIGGER_ACTION = 'TRIGGER_ACTION';\n","// @flow\n\nconst apiKey = '13b4bd07'; // Would store the API key in the environment variables usually\nconst baseUrl = `https://www.omdbapi.com/?apikey=${apiKey}`;\n\nexport const getSearchUrl = (searchValue: string): string => `${baseUrl}&s=${searchValue}`;\nexport const getIdUrl = (imdbID: string): string => `${baseUrl}&i=${imdbID}`;\nexport const sanitizeSearchValue = (searchValue: string): string =>\n\tsearchValue\n\t\t.trim()\n\t\t.replace(/\\s+/g, '+')\n\t\t.toLowerCase();\n","// @flow\r\n\r\nimport { SUBMIT_SEARCH } from '../actionTypes';\r\n\r\nexport const disptachInCache = (dispatch: Function, cache: Cache, searchValue: string, response: ApiResponse) => {\r\n\tdispatch({\r\n\t\ttype: SUBMIT_SEARCH,\r\n\t\tpayload: {\r\n\t\t\tmovies: cache[searchValue],\r\n\t\t\tsearchValue,\r\n\t\t\tcache,\r\n\t\t\tresponse: { ...response, loading: false }\r\n\t\t}\r\n\t});\r\n};\r\n\r\nexport const dispatchSuccess = (dispatch: Function, cache: Cache, searchValue: string, movies: Movies) => {\r\n\tdispatch({\r\n\t\ttype: SUBMIT_SEARCH,\r\n\t\tpayload: { movies, searchValue, cache, response: { error: false, loading: false } }\r\n\t});\r\n};\r\n\r\nexport const dispatchFail = (dispatch: Function, cache: Cache, searchValue: string) => {\r\n\tdispatch({\r\n\t\ttype: SUBMIT_SEARCH,\r\n\t\tpayload: { movies: [], searchValue, cache, response: { error: true, loading: false } }\r\n\t});\r\n};\r\n\r\nexport const dispatchLoading = (dispatch: Function, cache: Cache, searchValue: string) => {\r\n\tdispatch({\r\n\t\ttype: SUBMIT_SEARCH,\r\n\t\tpayload: { movies: [], searchValue, cache, response: { error: false, loading: true } }\r\n\t});\r\n};\r\n","// @flow\r\n\r\nimport { TRIGGER_ACTION } from '../actionTypes';\r\nimport { getSearchUrl, getIdUrl, sanitizeSearchValue } from './searchUtils';\r\nimport { dispatchFail, dispatchLoading, dispatchSuccess, disptachInCache } from './dispatchSearch';\r\n\r\nconst applyMiddleware = (dispatch: Function) => async (action: Object) => {\r\n\tif (action.type === TRIGGER_ACTION) {\r\n\t\tconst {\r\n\t\t\tpayload: { searchValue, cache, response }\r\n\t\t} = action;\r\n\t\tconst sanitizedSearchValue = sanitizeSearchValue(searchValue);\r\n\t\tconst searchUrl = getSearchUrl(sanitizedSearchValue);\r\n\t\tdispatchLoading(dispatch, cache, sanitizedSearchValue);\r\n\t\tif (sanitizedSearchValue in cache) {\r\n\t\t\t// If we've searched it already just load that\r\n\t\t\tdisptachInCache(dispatch, cache, sanitizedSearchValue, response);\r\n\t\t} else {\r\n\t\t\ttry {\r\n\t\t\t\tconst serverResponse = await fetch(searchUrl);\r\n\t\t\t\tconst serverResponseJson = await serverResponse.json();\r\n\t\t\t\tconst requests = serverResponseJson.Search.map(async (movie) => await fetch(getIdUrl(movie.imdbID)));\r\n\t\t\t\tconst responses = await Promise.all(requests);\r\n\t\t\t\tconst movies = await Promise.all(responses.map(async (response) => await response.json()));\r\n\t\t\t\tdispatchSuccess(dispatch, cache, sanitizedSearchValue, movies);\r\n\t\t\t} catch {\r\n\t\t\t\tdispatchFail(dispatch, cache, sanitizedSearchValue);\r\n\t\t\t}\r\n\t\t}\r\n\t} else {\r\n\t\tdispatch(action);\r\n\t}\r\n};\r\nexport default applyMiddleware;\r\n","import React, { useReducer, createContext } from 'react';\nimport initialState from './initialState';\nimport reducer from './reducer';\nimport applyMiddleware from './reducer/middleware';\nimport { useActions } from './actions';\n\nexport const Context = createContext();\n\nexport const Provider = ({ children }) => {\n\tconst [state, dispatch] = useReducer(reducer, initialState);\n\n\tconst enhancedDispatch = applyMiddleware(dispatch);\n\tconst actions = useActions(state, enhancedDispatch);\n\n\treturn <Context.Provider value={{ state, actions, enhancedDispatch }}>{children}</Context.Provider>;\n};\n","// @flow\r\nimport { useCallback } from 'react';\r\nimport * as actionTypes from './actionTypes';\r\n\r\nexport const useActions = (state: State, dispatch: Object) => ({\r\n\treplaceMissingImage: useCallback(\r\n\t\t(posterUrl: string) => {\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: actionTypes.REPLACE_MISSING_IMAGES,\r\n\t\t\t\tpayload: {\r\n\t\t\t\t\tmovies: state.movies,\r\n\t\t\t\t\tposterUrl\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t},\r\n\t\t[dispatch]\r\n\t),\r\n\r\n\tsubmitFilters: useCallback(\r\n\t\t(movies: Movies) => {\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: actionTypes.SUBMIT_FILTERS,\r\n\t\t\t\tpayload: { movies }\r\n\t\t\t});\r\n\t\t},\r\n\t\t[dispatch]\r\n\t),\r\n\r\n\tsubmitSearch: useCallback(\r\n\t\t(movies: Movies, searchValue: string, cache: Cache, response: ApiResponse) => {\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: actionTypes.TRIGGER_ACTION,\r\n\t\t\t\tpayload: { movies, searchValue, cache, response }\r\n\t\t\t});\r\n\t\t},\r\n\t\t[dispatch]\r\n\t)\r\n});\r\n","// @flow\nimport React, { useContext } from 'react';\nimport './searchBar.css';\nimport { Context } from '../../../Context';\n\nconst SearchBar = () => {\n\tconst {\n\t\tstate: { searchValue, cache, response, movies },\n\t\tactions\n\t} = useContext(Context);\n\tconst searchLabel = `Search OMDb's film database`;\n\tlet currentSearchValue = searchValue;\n\n\tconst handleChange = (event) => {\n\t\tevent.preventDefault();\n\t\tactions.submitSearch(movies, currentSearchValue, cache, response);\n\t};\n\treturn (\n\t\t<form className=\"searchBar hide-submit\" onSubmit={handleChange}>\n\t\t\t<label>\n\t\t\t\t{searchLabel}\n\t\t\t\t<input\n\t\t\t\t\ttype=\"search\" //Could this be type search- the cross poses a styling issue\n\t\t\t\t\tplaceholder=\"Star Wars 2: Electric Boogaloo\"\n\t\t\t\t\tonChange={(e) => (currentSearchValue = e.target.value)}\n\t\t\t\t\tdisabled={response.loading ? 'disabled' : null}\n\t\t\t\t/>\n\t\t\t</label>\n\t\t\t<input type=\"submit\" value=\"Submit\" />\n\t\t</form>\n\t);\n};\n\nexport default SearchBar;\n","// @flow\nimport React from 'react';\nimport './header.css';\nimport Title from './title';\nimport SearchBar from './searchBar';\n\nconst Header = () => {\n\treturn (\n\t\t<header className=\"header\">\n\t\t\t<Title />\n\t\t\t<SearchBar />\n\t\t</header>\n\t);\n};\n\nexport default Header;\n","// @flow\nimport React from 'react';\nimport './card.css';\nimport noImage from './noImage.png';\n\ntype Props = {\n\tmovie: MovieData,\n\tactions: Function\n};\n\nconst Card = ({ movie, actions }: Props) => {\n\tconst poster = movie.Poster === 'N/A' ? noImage : movie.Poster;\n\tconst imgAltText = movie.Poster === 'N/A' ? `Missing poster for ${movie.Title}` : `Poster for ${movie.Title}`;\n\tconst ariaLabel = `${movie.Title}. Released ${movie.Year}, Rated ${movie.imdbRating} on IMDB`;\n\tconst handleError = () => {\n\t\tactions.replaceMissingImage(poster);\n\t};\n\treturn (\n\t\t<div className=\"card\" aria-label={ariaLabel} aria-required=\"true\" tabIndex=\"0\">\n\t\t\t<img src={poster} onError={handleError} alt={imgAltText} />\n\n\t\t\t<div className=\"text\">\n\t\t\t\t<h1>{movie.Title}</h1>\n\t\t\t\t<span>\n\t\t\t\t\t<h2 className=\"label\">Year:</h2> <h2 className=\"data\">{movie.Year}</h2>\n\t\t\t\t</span>\n\t\t\t\t<span>\n\t\t\t\t\t<h2 className=\"label\">Rating:</h2> <h2 className=\"data\">{movie.imdbRating}</h2>\n\t\t\t\t</span>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default Card;\n","// @flow\nimport React, { useContext } from 'react';\nimport Card from './card';\nimport './card.css';\nimport { Context } from '../../../Context';\n\nconst Cards = () => {\n\tconst {\n\t\tstate: {\n\t\t\tmovies,\n\t\t\tresponse: { error }\n\t\t},\n\t\tactions\n\t} = useContext(Context);\n\tif (movies) {\n\t\tif (movies.length > 0) {\n\t\t\tconst moviesList = movies.map((movie, index) => {\n\t\t\t\treturn (\n\t\t\t\t\t<li key={`${movie.imdbID}-${index}`}>\n\t\t\t\t\t\t<Card movie={movie} actions={actions} />\n\t\t\t\t\t</li>\n\t\t\t\t);\n\t\t\t});\n\t\t\treturn <ul>{moviesList}</ul>;\n\t\t}\n\t\tif (error) return <h2>No results found :(</h2>;\n\t}\n\treturn null;\n};\n\nexport default Cards;\n","// @flow\nimport React, { useContext } from 'react';\nimport Cards from './cards';\nimport './main.css';\nimport Loading from './loading.svg';\nimport { Context } from '../../Context';\n\nconst Main = () => {\n\tlet loadingIcon = null;\n\tconst {\n\t\tstate: {\n\t\t\tresponse: { loading }\n\t\t}\n\t} = useContext(Context);\n\tif (loading) {\n\t\tloadingIcon = (\n\t\t\t<object type=\"image/svg+xml\" data={Loading}>\n\t\t\t\tsvg-animation\n\t\t\t</object>\n\t\t);\n\t}\n\treturn (\n\t\t<main>\n\t\t\t{loadingIcon}\n\t\t\t<Cards />\n\t\t</main>\n\t);\n};\n\nexport default Main;\n","import React from 'react';\nimport './App.css';\nimport Header from './components/header';\nimport Main from './components/main';\n\nconst App = React.memo(() => {\n\treturn (\n\t\t<div className=\"main\">\n\t\t\t<Header />\n\t\t\t<Main />\n\t\t</div>\n\t);\n});\n\nApp.displayName = 'App';\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n\twindow.location.hostname === 'localhost' ||\n\t\t// [::1] is the IPv6 localhost address.\n\t\twindow.location.hostname === '[::1]' ||\n\t\t// 127.0.0.0/8 are considered localhost for IPv4.\n\t\twindow.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n\tif (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n\t\t// The URL constructor is available in all browsers that support SW.\n\t\tconst publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n\t\tif (publicUrl.origin !== window.location.origin) {\n\t\t\t// Our service worker won't work if PUBLIC_URL is on a different origin\n\t\t\t// from what our page is served on. This might happen if a CDN is used to\n\t\t\t// serve assets; see https://github.com/facebook/create-react-app/issues/2374\n\t\t\treturn;\n\t\t}\n\n\t\twindow.addEventListener('load', () => {\n\t\t\tconst swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n\t\t\tif (isLocalhost) {\n\t\t\t\t// This is running on localhost. Let's check if a service worker still exists or not.\n\t\t\t\tcheckValidServiceWorker(swUrl, config);\n\n\t\t\t\t// Add some additional logging to localhost, pointing developers to the\n\t\t\t\t// service worker/PWA documentation.\n\t\t\t\tnavigator.serviceWorker.ready.then(() => {\n\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t'This web app is being served cache-first by a service ' + 'worker. To learn more, visit https://bit.ly/CRA-PWA'\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Is not localhost. Just register service worker\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t});\n\t}\n}\n\nfunction registerValidSW(swUrl, config) {\n\tnavigator.serviceWorker\n\t\t.register(swUrl)\n\t\t.then((registration) => {\n\t\t\tregistration.onupdatefound = () => {\n\t\t\t\tconst installingWorker = registration.installing;\n\t\t\t\tif (installingWorker == null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tinstallingWorker.onstatechange = () => {\n\t\t\t\t\tif (installingWorker.state === 'installed') {\n\t\t\t\t\t\tif (navigator.serviceWorker.controller) {\n\t\t\t\t\t\t\t// At this point, the updated precached content has been fetched,\n\t\t\t\t\t\t\t// but the previous service worker will still serve the older\n\t\t\t\t\t\t\t// content until all client tabs are closed.\n\t\t\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\t\t'New content is available and will be used when all ' +\n\t\t\t\t\t\t\t\t\t'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onUpdate) {\n\t\t\t\t\t\t\t\tconfig.onUpdate(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// At this point, everything has been precached.\n\t\t\t\t\t\t\t// It's the perfect time to display a\n\t\t\t\t\t\t\t// \"Content is cached for offline use.\" message.\n\t\t\t\t\t\t\tconsole.log('Content is cached for offline use.');\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onSuccess) {\n\t\t\t\t\t\t\t\tconfig.onSuccess(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\t\t})\n\t\t.catch((error) => {\n\t\t\tconsole.error('Error during service worker registration:', error);\n\t\t});\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n\t// Check if the service worker can be found. If it can't reload the page.\n\tfetch(swUrl, {\n\t\theaders: { 'Service-Worker': 'script' }\n\t})\n\t\t.then((response) => {\n\t\t\t// Ensure service worker exists, and that we really are getting a JS file.\n\t\t\tconst contentType = response.headers.get('content-type');\n\t\t\tif (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n\t\t\t\t// No service worker found. Probably a different app. Reload the page.\n\t\t\t\tnavigator.serviceWorker.ready.then((registration) => {\n\t\t\t\t\tregistration.unregister().then(() => {\n\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Service worker found. Proceed as normal.\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t})\n\t\t.catch(() => {\n\t\t\tconsole.log('No internet connection found. App is running in offline mode.');\n\t\t});\n}\n\nexport function unregister() {\n\tif ('serviceWorker' in navigator) {\n\t\tnavigator.serviceWorker.ready\n\t\t\t.then((registration) => {\n\t\t\t\tregistration.unregister();\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tconsole.error(error.message);\n\t\t\t});\n\t}\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from './Context';\n\nReactDOM.render(\n\t<Provider>\n\t\t<App />\n\t</Provider>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}